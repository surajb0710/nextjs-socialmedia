// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid()) @unique
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts Post[]
  comments Comment[]
  likes Like[]

  followers Follows[] @relation("following")
  followings Follows[] @relation("follower")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")

}

model Post{
  id String @id @default(cuid())  @unique
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // Cascade delete means delete all posts when author is deleted
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment{
  id String @id @default(cuid())  @unique
  postId String
  authorId String
  content String
  createdAt DateTime @default(now())

//Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  //composite index for complex queries
  @@index([authorId, postId])
}

model Like{
   id String @default(cuid()) @id @unique
   postId String
   userId String
   createdAt DateTime @default(now())

   //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId]) // same user cannot like any post twice
}

model Follows{
  followerId String @default(cuid())  @unique
  followingId String
  createdAt DateTime @default(now())

  //Relations
  user User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  post User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@id([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}
